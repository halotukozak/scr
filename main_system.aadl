package main_system

public

with ticket_machine_system, hardware;
with custom_types;
with SEI;

---------------------------------------------------------

system TicketVendingMachineSystem
end TicketVendingMachineSystem;

system implementation TicketVendingMachineSystem.impl
subcomponents
  -- sensory i urządzenia
  this_ticket_stock_sensor: device TicketStockSensor.impl;
  this_cash_level_sensor: device CashLevelSensor.impl;

  -- interfejsy użytkownika
  this_buttons: device Buttons.impl;
  this_screen: device Screen.impl;

  -- logika automatu biletowego
  this_ticket_vending_machine: system ticket_machine_system::TicketVendingSystem.impl;
  this_controller: process Controller.impl;

  -- hardware
  this_bus: bus hardware::SerialBus.impl;
  this_processor: processor hardware::MainProcessor.impl;
  this_ram: memory hardware::Ram.impl;

connections
  ticket_stock_conn: port this_ticket_stock_sensor.level -> this_controller.ticket_stock_level;
  cash_level_conn: port this_cash_level_sensor.level -> this_controller.cash_level;
  buttons_button_pressed_conn: port this_buttons.button_pressed -> this_controller.button_pressed;
  screen_ticket_dispensed_conn: port this_controller.ticket_dispensed_out -> this_screen.ticket_dispensed;
  screen_ticket_stock_low_conn: port this_controller.ticket_stock_low -> this_screen.ticket_stock_low;
  vendingmachine_ticket_request_conn: port this_controller.ticket_request -> this_ticket_vending_machine.ticket_request;
  vendingmachine_ticket_dispensed_conn: port this_ticket_vending_machine.ticket_dispensed -> this_controller.ticket_dispensed_in;

  -- bus connections
  bus_buttons: bus access this_bus -> this_buttons.bus_access;
  bus_screen: bus access this_bus -> this_screen.bus_access;
  bus_ticket_stock_sensor: bus access this_bus -> this_ticket_stock_sensor.bus_access;
  bus_cash_level_sensor: bus access this_bus -> this_cash_level_sensor.bus_access;
  bus_processor: bus access this_bus -> this_processor.bus_access;
  bus_ram: bus access this_bus -> this_ram.bus_access;
  bus_ticket_vending_machine: bus access this_bus -> this_ticket_vending_machine.this_bus;

properties
  Actual_Memory_Binding => (reference (this_ram)) applies to this_ticket_stock_sensor;
  Actual_Memory_Binding => (reference (this_ram)) applies to this_cash_level_sensor;
  Actual_Memory_Binding => (reference (this_ram)) applies to this_buttons;
  Actual_Memory_Binding => (reference (this_ram)) applies to this_screen;
  Actual_Memory_Binding => (reference (this_ram)) applies to this_processor;

  Actual_Processor_Binding => (reference (this_processor)) applies to this_ticket_stock_sensor;
  Actual_Processor_Binding => (reference (this_processor)) applies to this_cash_level_sensor;
  Actual_Processor_Binding => (reference (this_processor)) applies to this_buttons;
  Actual_Processor_Binding => (reference (this_processor)) applies to this_screen;
  Actual_Processor_Binding => (reference (this_processor)) applies to this_controller.this_thread_read_levels;
  Actual_Processor_Binding => (reference (this_processor)) applies to this_controller.this_thread_read_buttons;

  Actual_Connection_Binding => (reference (this_bus)) applies to ticket_stock_conn;
  Actual_Connection_Binding => (reference (this_bus)) applies to cash_level_conn;
  Actual_Connection_Binding => (reference (this_bus)) applies to buttons_button_pressed_conn;
  Actual_Connection_Binding => (reference (this_bus)) applies to screen_ticket_dispensed_conn;
  Actual_Connection_Binding => (reference (this_bus)) applies to screen_ticket_stock_low_conn;
  Actual_Connection_Binding => (reference (this_bus)) applies to vendingmachine_ticket_request_conn;
  Actual_Connection_Binding => (reference (this_bus)) applies to vendingmachine_ticket_dispensed_conn;

end TicketVendingMachineSystem.impl;

---------------------------------------------------------

process Controller
features
  ticket_stock_level: in data port custom_types::StockLevel;
  cash_level: in data port custom_types::CashLevel;
  button_pressed: in event data port custom_types::ButtonType;
  ticket_request: out event data port custom_types::TicketRequest;
  ticket_dispensed_in: in event port;
  ticket_dispensed_out: out event port;
  ticket_stock_low: out event port;
end Controller;

process implementation Controller.impl
subcomponents
  this_thread_read_levels: thread ReadLevels.impl;
  this_thread_read_buttons: thread ReadButtons.impl;

connections
  ticket_stock_level_conn: port ticket_stock_level -> this_thread_read_levels.ticket_stock_level;
  cash_level_conn: port cash_level -> this_thread_read_levels.cash_level;
  ticket_stock_low_conn: port this_thread_read_levels.ticket_stock_low -> ticket_stock_low;

  button_pressed_conn: port button_pressed -> this_thread_read_buttons.button_pressed;
  ticket_request_conn: port this_thread_read_buttons.ticket_request -> ticket_request;
--  ticket_dispensed_conn: port ticket_dispensed -> this_thread_read_buttons.ticket_dispensed;

end Controller.impl;

---------------------------------------------------------

thread ReadLevels
features
  ticket_stock_level: in data port custom_types::StockLevel;
  cash_level: in data port custom_types::CashLevel;
  ticket_stock_low: out event port;
properties
  Dispatch_Offset => 4ms;
  Deadline => 10ms;
  Period => 500ms;
  Compute_Execution_Time => 0ms..4ms;
end ReadLevels;

thread implementation ReadLevels.impl
end ReadLevels.impl;

---------------------------------------------------------

thread ReadButtons
features
  button_pressed: in event data port custom_types::ButtonType;
  ticket_request: out event data port custom_types::TicketRequest;
  ticket_dispensed: in event port;
properties
  Dispatch_Offset => 2ms;
  Deadline => 30ms;
  Period => 50ms;
  Compute_Execution_Time => 0ms..4ms;
end ReadButtons;

thread implementation ReadButtons.impl
end ReadButtons.impl;

---------------------------------------------------------

device TicketStockSensor
features
  level: out data port custom_types::StockLevel;
  bus_access: requires bus access hardware::SerialBus;
  properties
    SEI::GrossWeight => 0.1kg;
    Period => 1000ms;
    Dispatch_Protocol => Periodic;
end TicketStockSensor;

device implementation TicketStockSensor.impl
end TicketStockSensor.impl;

device CashLevelSensor
features
  level: out data port custom_types::CashLevel;
  bus_access: requires bus access hardware::SerialBus;
  properties
    SEI::GrossWeight => 0.1kg;
    Period => 1000ms;
    Dispatch_Protocol => Periodic;
end CashLevelSensor;

device implementation CashLevelSensor.impl
end CashLevelSensor.impl;

device Buttons
features
  button_pressed: out event data port custom_types::ButtonType;
  bus_access: requires bus access hardware::SerialBus;
  properties
    SEI::GrossWeight => 0.2kg;
    Dispatch_Protocol => Aperiodic;
end Buttons;

device implementation Buttons.impl
end Buttons.impl;

device Screen
features
  ticket_dispensed: in event port;
  ticket_stock_low: in event port;
  bus_access: requires bus access hardware::SerialBus;
  properties
    SEI::GrossWeight => 0.2kg;
    Dispatch_Protocol => Aperiodic;
end Screen;

device implementation Screen.impl
end Screen.impl;

end main_system;
